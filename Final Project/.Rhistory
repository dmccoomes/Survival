#plot KM curve
plot(survfit.luke.disgroup,
conf.int=TRUE,
main="KM survival estimate of entire cohort (includes 95% CI)",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "light blue", "light blue"),
lty = c("solid", "dashed", "dashed"),
lwd = c(2,1,1))
#plot KM curve
plot(survfit.luke.disgroup,
conf.int=FALSE,
main="KM survival estimate by disease group",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "light blue", "light blue"),
lty = c("solid", "dashed", "dashed"),
lwd = c(2,1,1))
#plot KM curve
plot(survfit.luke.disgroup,
conf.int=FALSE,
main="KM survival estimate by disease group",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "orange", "red"),
lty = c("solid", "dashed", "dashed"),
lwd = c(2,2,2))
#plot KM curve
plot(survfit.luke.disgroup,
conf.int=FALSE,
main="KM survival estimate by disease group",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "orange", "red"),
lty = c("solid", "dashed", "solid"),
lwd = c(2,2,2))
#plot KM curve
plot(survfit.luke.disgroup,
conf.int=FALSE,
main="KM survival estimate by disease group",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "orange", "red"),
lty = c("solid", "dashed", "solid"),
lwd = c(2,2,2))
legend("topright", c("ALL", "AML low", "AML high"), col=c("blue", "red", "orange"), lwd=c(2,2,2), lty=c("solid", "solid", "dashed"))
plot(survfit.luke.fab,
conf.int=FALSE,
main="KM survival estimate by FAB classification",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "red"),
lty = c("solid", "dashed"),
lwd = c(2,2))
legend("topright", c("FAB 4 or 5 & AML", "other"), col=c("blue", "red"), lwd=c(2,2), lty=c("solid", "solid"))
survdiff(surv.luke.1 ~ male, data=data, rho=0)
survdiff(surv.luke.1 ~ donormale, data=data, rho=0)
survdiff(surv.luke.1 ~ disgroup, data=data, rho=0)
survdiff(surv.luke.1 ~ cmv, data=data, rho=0)
survdiff(surv.luke.1 ~ fab, data=data, rho=0)
survdiff(surv.luke.1 ~ mtx, data=data, rho=0)
summary(data$age)
summary(data$donorage)
library(survMisc)
comp(ten(survfit.luke.disgroup))$tests
comp(ten(survfit.luke.male))$tests
library(survMisc)
survfit.luke.male <- survfit(surv.luke.1 ~ male, data=data, conf.type="log-log")
survfit.luke.donormale <- survfit(surv.luke.1 ~ donormale, data=data, conf.type="log-log")
survfit.luke.cmv <- survfit(surv.luke.1 ~ cmv, data=data, conf.type="log-log")
survfit.luke.mtx <- survfit(surv.luke.1 ~ mtx, data=data, conf.type="log-log")
comp(ten(survfit.luke.male))$tests
comp(ten(survfit.luke.donormale))$tests
comp(ten(survfit.luke.disgroup))$tests
comp(ten(survfit.luke.cmv))$tests
comp(ten(survfit.luke.fab))$tests
comp(ten(survfit.luke.mtx))$tests
comp(ten(survfit.luke.male))$tests
comp(ten(survfit.luke.donormale))$tests     #
comp(ten(survfit.luke.disgroup))$tests      #
comp(ten(survfit.luke.cmv))$tests           #
comp(ten(survfit.luke.fab))$tests
comp(ten(survfit.luke.mtx))$tests
survfit.luke.mtx <- survfit(surv.luke.1 ~ mtx, data=data, conf.type="log-log")
plot(survfit.luke.mtx,
fun="cumhaz",
col=c("blue", "red"), lwd=2, lty=c("solid", "solid"),
xlab="Time (in days)", ylab="Cumulative Hazard", main="Nelson-Aalen cumulative hazard estimates by MTX")
legend("topleft", c("No methotrexate use", "Methotrexate use"), col=c("blue", "red"), lwd=c(2,2), lty=c("solid", "solid"))
survfit.luke.mtx <- survfit(surv.luke.1 ~ mtx, data=data, conf.type="log-log")
plot(survfit.luke.mtx,
fun="cumhaz",
col=c("blue", "red"), lwd=2, lty=c("solid", "solid"),
xlab="Time (in days)", ylab="Cumulative Hazard", main="Nelson-Aalen cumulative hazard estimates by MTX")
legend("bottomright", c("No methotrexate use", "Methotrexate use"), col=c("blue", "red"), lwd=c(2,2), lty=c("solid", "solid"))
plot(survfit.luke.mtx,
conf.int=FALSE,
main="KM survival estimate by Methotrexate use",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "red"),
lty = c("solid", "dashed"),
lwd = c(2,2))
legend("topright", c("No methotrexate use", "Methotrexate use"), col=c("blue", "red"), lwd=c(2,2), lty=c("solid", "solid"))
plot(survfit.luke.mtx,
conf.int=FALSE,
main="KM survival estimate by Methotrexate use",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "red"),
lty = c("solid", "dashed"),
lwd = c(2,2))
legend("topright", c("No methotrexate use", "Methotrexate use"), col=c("blue", "red"), lwd=c(2,2), lty=c("solid", "dashed"))
survdiff(surv.luke.1 ~ male, data=data, rho=0)
survdiff(surv.luke.1 ~ donormale, data=data, rho=0)
survdiff(surv.luke.1 ~ disgroup, data=data, rho=0)
survdiff(surv.luke.1 ~ cmv, data=data, rho=0)
survdiff(surv.luke.1 ~ fab, data=data, rho=0)
survdiff(surv.luke.1 ~ mtx, data=data, rho=0)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE)
library(survMisc)
comp(ten(survfit.meth.adix))$tests
knitr::opts_chunk$set(echo=FALSE, warning=FALSE)
library(pander)
panderOptions('digits', 4)
panderOptions('round', 4)
library(tidyverse)
library(knitr)
library(kableExtra)
source("getmedianres.R")
#Maintenance Group
maint_table_time <- c(9,12,13,18,23,28,31,34,45,48,161)
maint_table_n <- c(12,11,10,9,8,7,6,5,4,2,1)
maint_table_d <- c(1,1,0,1,1,0,1,1,1,1,0)
maint_table <- cbind.data.frame(maint_table_time, maint_table_n, maint_table_d)
maint_table$d_n <- maint_table$maint_table_d / maint_table$maint_table_n
maint_table$d_n_1 <- 1-maint_table$d_n
#Generating survival est
for (val in maint_table$maint_table_time) {
maint_table <- mutate(maint_table, S_t = ifelse(maint_table_time>9, lag(maint_table$S_t)*d_n_1, 0.9166667))
}
#Generating cumulative haz est
for (val in maint_table$maint_table_time) {
maint_table <- mutate(maint_table, H_t = ifelse(maint_table_time>9, lag(maint_table$H_t)+d_n, 0.08333333))
}
kable(maint_table, digits=3, align="c",
col.names = c("Time (t)",
"# at risk (n)",
"# events (d)",
"d/n",
"1-d/n",
"S(t)",
"H(t)")) %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F, position="left") %>%
column_spec(1, bold=T, border_right=T)
#Control Group
cont_table_time <- c(4,5,8,10,12,16,23,27,30,38,43,45)
cont_table_n <- c(13,12,11,9,8,7,6,5,4,3,2,1)
cont_table_d <- c(1,1,2,0,1,0,1,1,1,1,1,1)
cont_table <- cbind.data.frame(cont_table_time, cont_table_n, cont_table_d)
cont_table$d_n <- cont_table$cont_table_d / cont_table$cont_table_n
cont_table$d_n_1 <- 1-cont_table$d_n
#Generating survival est
for (val in cont_table$cont_table_time) {
cont_table <- mutate(cont_table, S_t = ifelse(cont_table_time>4, lag(cont_table$S_t)*d_n_1, d_n_1))
}
#Generating cumulative haz est
for (val in cont_table$cont_table_time) {
cont_table <- mutate(cont_table, H_t = ifelse(cont_table_time>4, lag(cont_table$H_t)+d_n, d_n))
}
kable(cont_table, digits=3, align="c",
col.names = c("Time (t)",
"# at risk (n)",
"# events (d)",
"d/n",
"1-d/n",
"S(t)",
"H(t)")) %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F, position="left") %>%
column_spec(1, bold=T, border_right=T)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%202/addicts.csv"
adix <- read.csv(link)
link = "https://github.com/dmccoomes/Survival/raw/master/Quiz%20section/fitparametric.R"
source(link)
surv.adix <- Surv(time=adix$time, event=adix$event, type="right")
survfit.adix <- survfit(surv.adix ~ 1, data=adix, conf.type="log-log")
summary(survfit.adix)
plot(survfit.adix,
conf.int=TRUE,
main="Kaplan-Meier survival estimate (includes 95% CI)",
ylab="Survival probability", xlab="Time (in days)",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
survfit.inc.adix <- survfit(surv.adix ~ prison, data=adix, conf.type="log-log")
plot(survfit.inc.adix,
conf.int=FALSE,
main="Kaplan-Meier survival estimate by incarceration status",
ylab="Survival probability", xlab="Time (in days)",
col=c("blue", "orange"),
lty=c("solid", "dashed"),
lwd=c(2, 2))
legend("topright", c("not incarcerated", "incarcerated"), col=c("blue", "orange"), lwd=c(2,2), lty=c("solid", "dashed"))
#fit curve for those that were not incarcerated
adix.inc.0 <- adix[adix$prison == 0, ]
surv.adix.noprison <- Surv(time=adix.inc.0$time, event=adix.inc.0$event)
survfit.adix.noprison <- survfit(surv.adix.noprison ~ 1, data=adix.inc.0, conf.type="log-log")
#fit curve for those that were incarcerated
adix.inc.1 <- adix[adix$prison == 1, ]
surv.adix.prison <- Surv(time=adix.inc.1$time, event=adix.inc.1$event)
survfit.adix.prison <- survfit(surv.adix.prison ~ 1, data=adix.inc.1, conf.type="log-log")
#perform wald test for difference
wald.stat.prison.8months <- (summary(survfit.adix.noprison, times=240)["surv"]$surv - summary(survfit.adix.prison, times=240)["surv"]$surv) /                                    (summary(survfit.adix.noprison, times=240)["std.err"]$std.err^2 + summary(survfit.adix.prison,                                                       times=240)["std.err"]$std.err^2)^(1/2)
wald.stat.prison.8months
#compute wald p-value
2 * pnorm(-abs(wald.stat.prison.8months))
survdiff(surv.adix ~ prison, data=adix, rho=0)
library(survMisc)
comp(ten(survfit.inc.adix))$tests
plot(survfit.inc.adix,
fun="cumhaz",
col=c("blue", "orange"), lwd=2, lty=c("solid", "dashed"),
xlab="Time (in days)", ylab="Cumulative Hazard", main="Nelson-Aalen cumulative hazard estimates by incarceration status")
legend("topleft", c("not incarcerated", "incarcerated"), col=c("blue", "orange"), lwd=c(2,2), lty=c("solid", "dashed"))
summary(adix$prison)
if (!require(knitr)) install.packages("knitr")
library(knitr)
knitr::opts_chunk$set(echo = FALSE)
if (!require(kableExtra)) install.packages("kableExtra")
if (!require(flexsurv)) install.packages("flexsurv")
if (!require(survMisc)) install.packages("survMisc")
if (!require(msm)) install.packages("msm")
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(tableone)) install.packages("tableone")
if (!require(compareGroups)) install.packages("compareGroups")
if (!require(table1)) install.packages("table1")
library(tidyverse)
library(knitr)
library(kableExtra)
#source("getmedianres.R")
library(survival)
library(flexsurv)
library(survMisc) # for Wilcoxon-Gehan-Breslow test
library(msm)
library(tableone)
library(compareGroups)
library(table1)
link = "https://github.com/dmccoomes/Survival/raw/master/Final%20Project/Data/bmt.csv"
data <- read.csv(url(link), header=TRUE)
surv.luke.1 <- Surv(time=data$tdfs, event=data$deltadfs, type="right")
#fit KM curve
survfit.luke.1 <- survfit(surv.luke.1 ~ 1, data=data, conf.type="log-log")
summary(survfit.luke.1)
#plot KM curve
plot(survfit.luke.1,
conf.int=TRUE,
main="KM survival estimate of entire cohort (includes 95% CI)",
ylab = "Survival probability",
xlab = "Time (days)",
col = c("blue", "light blue", "light blue"),
lty = c("solid", "dashed", "dashed"),
lwd = c(2,1,1))
summary(survfit.luke.1)$table
CreateTableOne(data=data)
#run each cox ph model
covariates <- c("age", "male", "donorage", "donormale", "cmv", "donorcmv", "waittime", "disgroup", "fab", "mtx")
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('surv.luke.1 ~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data=data)})
#get results
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
#p.value <- signif(x$wald["pvalue"], digits=3)
p.value <- round(x$wald["pvalue"], 3)
wald.test <- round(x$wald["test"], 3)
beta <- signif(x$coef[1], 3);
HR <- round(x$coef[2], 3);
HR.confint.lower <- round(x$conf.int[,"lower .95"], 3)
HR.confint.upper <- round(x$conf.int[,"upper .95"], 3)
#HR <- paste0(HR, " (",
#             HR.confint.lower, "-", HR.confint.upper, ")")
#res <- c(beta, HR, wald.test, p.value)       only including HR, 95% CI, and p value
res <- c(HR, HR.confint.lower, HR.confint.upper, p.value)
#names(res) <- c("beta", "HR (95% CI for HR", "wald.test", "p.value")
names(res) <- c("HR", "95% CI lower", "95% CI upper", "p value")
return(res)
})
res <- t(as.data.frame(univ_results, check.names=FALSE))
#as.data.frame(res)
kable(res, caption="Cox PH HR using univariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec(9, bold=T)
#run each cox ph model
covariates <- c("age", "male", "donorage", "donormale", "cmv", "donorcmv", "waittime", "disgroup", "fab", "mtx")
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('surv.luke.1 ~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data=data)})
#get results
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
#p.value <- signif(x$wald["pvalue"], digits=3)
p.value <- round(x$wald["pvalue"], 3)
wald.test <- round(x$wald["test"], 3)
beta <- signif(x$coef[1], 3);
HR <- round(x$coef[2], 3);
HR.confint.lower <- round(x$conf.int[,"lower .95"], 3)
HR.confint.upper <- round(x$conf.int[,"upper .95"], 3)
#HR <- paste0(HR, " (",
#             HR.confint.lower, "-", HR.confint.upper, ")")
#res <- c(beta, HR, wald.test, p.value)       only including HR, 95% CI, and p value
res <- c(HR, HR.confint.lower, HR.confint.upper, p.value)
#names(res) <- c("beta", "HR (95% CI for HR", "wald.test", "p.value")
names(res) <- c("HR", "95% CI lower", "95% CI upper", "p value")
return(res)
})
res <- t(as.data.frame(univ_results, check.names=FALSE))
#as.data.frame(res)
kable(res, caption="Cox PH HR using univariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec(9, bold=T)
#run each cox ph model
covariates <- c("age", "male", "donorage", "donormale", "cmv", "donorcmv", "waittime", "disgroup", "fab", "mtx")
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('surv.luke.1 ~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data=data)})
#get results
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
#p.value <- signif(x$wald["pvalue"], digits=3)
p.value <- round(x$wald["pvalue"], 3)
wald.test <- round(x$wald["test"], 3)
beta <- signif(x$coef[1], 3);
HR <- round(x$coef[2], 3);
HR.confint.lower <- round(x$conf.int[,"lower .95"], 3)
HR.confint.upper <- round(x$conf.int[,"upper .95"], 3)
#HR <- paste0(HR, " (",
#             HR.confint.lower, "-", HR.confint.upper, ")")
#res <- c(beta, HR, wald.test, p.value)       only including HR, 95% CI, and p value
res <- c(HR, HR.confint.lower, HR.confint.upper, p.value)
#names(res) <- c("beta", "HR (95% CI for HR", "wald.test", "p.value")
names(res) <- c("HR", "95% CI lower", "95% CI upper", "p value")
return(res)
})
res <- t(as.data.frame(univ_results, check.names=FALSE))
#as.data.frame(res)
kable(res, caption="Cox PH HR using univariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec([9, 10], bold=T)
#run each cox ph model
covariates <- c("age", "male", "donorage", "donormale", "cmv", "donorcmv", "waittime", "disgroup", "fab", "mtx")
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('surv.luke.1 ~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data=data)})
#get results
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
#p.value <- signif(x$wald["pvalue"], digits=3)
p.value <- round(x$wald["pvalue"], 3)
wald.test <- round(x$wald["test"], 3)
beta <- signif(x$coef[1], 3);
HR <- round(x$coef[2], 3);
HR.confint.lower <- round(x$conf.int[,"lower .95"], 3)
HR.confint.upper <- round(x$conf.int[,"upper .95"], 3)
#HR <- paste0(HR, " (",
#             HR.confint.lower, "-", HR.confint.upper, ")")
#res <- c(beta, HR, wald.test, p.value)       only including HR, 95% CI, and p value
res <- c(HR, HR.confint.lower, HR.confint.upper, p.value)
#names(res) <- c("beta", "HR (95% CI for HR", "wald.test", "p.value")
names(res) <- c("HR", "95% CI lower", "95% CI upper", "p value")
return(res)
})
res <- t(as.data.frame(univ_results, check.names=FALSE))
#as.data.frame(res)
kable(res, caption="Cox PH HR using univariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec(9:10, bold=T)
knitr::opts_chunk$set(echo = TRUE)
#first, fit a Cox PH model including all baseline covariates
model.base.1 <- coxph(surv.luke.1 ~ age + male + donorage + donormale + cmv + donorcmv + waittime + disgroup + fab + mtx, data=data)
summary(model.base.1)
#second, are any of these variables associated with difference by themselves - I did this in the box above
model.base.age <- coxph(surv.luke.1 ~ age, data=data)
model.base.male <- coxph(surv.luke.1 ~ male, data=data)
model.base.donorage <- coxph(surv.luke.1 ~ donorage, data=data)
model.base.donormale <- coxph(surv.luke.1 ~ donormale, data=data)
model.base.cmv <- coxph(surv.luke.1 ~ cmv, data=data)
model.base.donorcmv <- coxph(surv.luke.1 ~ donorcmv, data=data)
model.base.waittime <- coxph(surv.luke.1 ~ waittime, data=data)
model.base.disgroup <- coxph(surv.luke.1 ~ disgroup, data=data)
model.base.fab <- coxph(surv.luke.1 ~ fab, data=data)
model.base.mtx <- coxph(surv.luke.1 ~ mtx, data=data)
summary(model.base.age)
summary(model.base.male)
summary(model.base.donorage)
summary(model.base.donormale)
summary(model.base.cmv)
summary(model.base.donorcmv)
summary(model.base.waittime)
summary(model.base.disgroup)
summary(model.base.fab)
summary(model.base.mtx)
#build table of z-scores for individual models
summary(model.base.1)
p.value <- as.data.frame(summary(model.base.1)$coefficients[,5])
HR <- as.data.frame(summary(model.base.1)$coefficients[,2])
conf.int.low <- as.data.frame(summary(model.base.1)$conf.int[,3])
conf.int.high <- as.data.frame(summary(model.base.1)$conf.int[,4])
est <- cbind(HR, conf.int.low, conf.int.high, p.value)
names(est) <- c("HR", "HR 95% CI low", "HR 95% CI high", "p value")
est <- round(est, digits=3)
#est
kable(est, caption="Cox PH HR using multivariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec(9, bold=T)
p.value <- as.data.frame(summary(model.base.1)$coefficients[,5])
HR <- as.data.frame(summary(model.base.1)$coefficients[,2])
conf.int.low <- as.data.frame(summary(model.base.1)$conf.int[,3])
conf.int.high <- as.data.frame(summary(model.base.1)$conf.int[,4])
est <- cbind(HR, conf.int.low, conf.int.high, p.value)
names(est) <- c("HR", "HR 95% CI low", "HR 95% CI high", "p value")
est <- round(est, digits=3)
#est
kable(est, caption="Cox PH HR using multivariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec(9:10, bold=T)
#run each cox ph model
covariates <- c("age", "male", "donorage", "donormale", "cmv", "donorcmv", "waittime", "disgroup", "fab", "mtx")
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('surv.luke.1 ~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data=data)})
#get results
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
#p.value <- signif(x$wald["pvalue"], digits=3)
p.value <- round(x$wald["pvalue"], 3)
wald.test <- round(x$wald["test"], 3)
beta <- signif(x$coef[1], 3);
HR <- round(x$coef[2], 3);
HR.confint.lower <- round(x$conf.int[,"lower .95"], 3)
HR.confint.upper <- round(x$conf.int[,"upper .95"], 3)
#HR <- paste0(HR, " (",
#             HR.confint.lower, "-", HR.confint.upper, ")")
#res <- c(beta, HR, wald.test, p.value)       only including HR, 95% CI, and p value
res <- c(HR, HR.confint.lower, HR.confint.upper, p.value)
#names(res) <- c("beta", "HR (95% CI for HR", "wald.test", "p.value")
names(res) <- c("HR", "95% CI lower", "95% CI upper", "p value")
return(res)
})
res <- t(as.data.frame(univ_results, check.names=FALSE))
#as.data.frame(res)
kable(res, caption="Cox PH HR using univariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec(9:10, bold=T)
p.value <- as.data.frame(summary(model.base.1)$coefficients[,5])
HR <- as.data.frame(summary(model.base.1)$coefficients[,2])
conf.int.low <- as.data.frame(summary(model.base.1)$conf.int[,3])
conf.int.high <- as.data.frame(summary(model.base.1)$conf.int[,4])
est <- cbind(HR, conf.int.low, conf.int.high, p.value)
names(est) <- c("HR", "HR 95% CI low", "HR 95% CI high", "p value")
est <- round(est, digits=3)
#est
kable(est, caption="Cox PH HR using multivariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec(9:10, bold=T)
survdiff(surv.luke.1 ~ donorcmv, data=data, rho=0)
comp(ten(survfit.luke.donorcmv))$tests      #
survfit.luke.donorcmv <- survfit(surv.luke.1 ~ donorcmv, data=data, conf.type="log-log")
comp(ten(survfit.luke.donorcmv))$tests      #
#run each cox ph model
covariates <- c("age", "male", "donorage", "donormale", "cmv", "donorcmv", "waittime", "disgroup", "fab", "mtx")
univ_formulas <- sapply(covariates,
function(x) as.formula(paste('surv.luke.1 ~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data=data)})
#get results
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
#p.value <- signif(x$wald["pvalue"], digits=3)
p.value <- round(x$wald["pvalue"], 3)
wald.test <- round(x$wald["test"], 3)
beta <- signif(x$coef[1], 3);
HR <- round(x$coef[2], 3);
HR.confint.lower <- round(x$conf.int[,"lower .95"], 3)
HR.confint.upper <- round(x$conf.int[,"upper .95"], 3)
#HR <- paste0(HR, " (",
#             HR.confint.lower, "-", HR.confint.upper, ")")
#res <- c(beta, HR, wald.test, p.value)       only including HR, 95% CI, and p value
res <- c(HR, HR.confint.lower, HR.confint.upper, p.value)
#names(res) <- c("beta", "HR (95% CI for HR", "wald.test", "p.value")
names(res) <- c("HR", "95% CI lower", "95% CI upper", "p value")
return(res)
})
res <- t(as.data.frame(univ_results, check.names=FALSE))
#as.data.frame(res)
kable(res, caption="Cox PH HR using univariate model")  %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE, position="left") %>%
column_spec(1, width="4cm") %>%
row_spec(9:10, bold=T)
