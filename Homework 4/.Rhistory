(80-60) * coef(weibull.adix.2)["dose:prison"]
AFT.se.2 <- deltamethod(g = ~(80-60) * x1 + (80-60) * x4,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#fit new weibull AFT model
weibull.adix.2 <- flexsurvreg(surv.adix ~ dose + clinic + prison + dose*prison, data=adix, dist="weibull")
#get point estimate and CI comparing 80 to 60 mg/day for someone with a history of incarceration and from the same clinic
AFT.point.2 <- (80-60) * coef(weibull.adix.2)["dose"] +
(80-60) * coef(weibull.adix.2)["dose:prison"]
AFT.se.2 <- deltamethod(g = ~(80-60) * x1 + (80-60) * x4,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.2)
#confidence interval
exxp(c(AFT.point.2 - 1.96*AFT.se.2,
AFT.point.2 + 1.96*AFT.se.2))
#fit new weibull AFT model
weibull.adix.2 <- flexsurvreg(surv.adix ~ dose + clinic + prison + dose*prison, data=adix, dist="weibull")
#get point estimate and CI comparing 80 to 60 mg/day for someone with a history of incarceration and from the same clinic
AFT.point.2 <- (80-60) * coef(weibull.adix.2)["dose"] +
(80-60) * coef(weibull.adix.2)["dose:prison"]
AFT.se.2 <- deltamethod(g = ~(80-60) * x1 + (80-60) * x4,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.2)
#confidence interval
exp(c(AFT.point.2 - 1.96*AFT.se.2,
AFT.point.2 + 1.96*AFT.se.2))
#fit new weibull AFT model
weibull.adix.2 <- flexsurvreg(surv.adix ~ dose + clinic + prison + dose*prison, data=adix, dist="weibull")
#get point estimate and CI comparing 80 to 60 mg/day for someone with a history of incarceration and from the same clinic
AFT.point.2 <- (80-60) * coef(weibull.adix.2)["dose"] +
(80-60) * coef(weibull.adix.2)["dose:prison"]
AFT.se.2 <- deltamethod(g = ~(80-60) * x1 + (80-60) * x4,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.2)
#confidence interval
exp(c(AFT.point.2 - 1.96*AFT.se.2,
AFT.point.2 + 1.96*AFT.se.2))
#get point estimate and CI comparing 80 to 60 mg/day for someone without a history of incarceration and from the same clinic
AFT.point.3 <- (80-60) * coef(weibull.adix.2)["dose"]
AFT.se.3 <- deltamethod(g = ~(80-60) * x1,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.3)
#confidence interval
exp(c(AFT.point.3 - 1.96*AFT.se.3,
AFT.point.3 + 1.96*AFT.se.3))
weibull.adix.3 <- flexsurvreg(surv.adix ~ dose*prison + clinic, data=adix, dist="weibull")
weibull.adix.3
#fit new weibull AFT model
weibull.adix.2 <- flexsurvreg(surv.adix ~ dose + clinic + prison + dose*prison, data=adix, dist="weibull")
weibull.adix.3 <- flexsurvreg(surv.adix ~ dose*prison + clinic, data=adix, dist="weibull")
#get point estimate and CI comparing 80 to 60 mg/day for someone with a history of incarceration and from the same clinic
AFT.point.2 <- (80-60) * coef(weibull.adix.2)["dose"] +
(80-60) * coef(weibull.adix.2)["dose:prison"]
AFT.se.2 <- deltamethod(g = ~(80-60) * x1 + (80-60) * x2,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.2)
#confidence interval
exp(c(AFT.point.2 - 1.96*AFT.se.2,
AFT.point.2 + 1.96*AFT.se.2))
#get point estimate and CI comparing 80 to 60 mg/day for someone without a history of incarceration and from the same clinic
AFT.point.3 <- (80-60) * coef(weibull.adix.2)["dose"]
AFT.se.3 <- deltamethod(g = ~(80-60) * x1,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.3)
#confidence interval
exp(c(AFT.point.3 - 1.96*AFT.se.3,
AFT.point.3 + 1.96*AFT.se.3))
#fit new weibull AFT model
weibull.adix.2 <- flexsurvreg(surv.adix ~ dose + clinic + prison + dose*prison, data=adix, dist="weibull")
weibull.adix.3 <- flexsurvreg(surv.adix ~ dose*prison + clinic, data=adix, dist="weibull")
#get point estimate and CI comparing 80 to 60 mg/day for someone with a history of incarceration and from the same clinic
AFT.point.2 <- (80-60) * coef(weibull.adix.2)["dose"] +
(80-60) * coef(weibull.adix.2)["dose:prison"]
AFT.se.2 <- deltamethod(g = ~(80-60) * x1 + (80-60) * x2,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.2)
#confidence interval
exp(c(AFT.point.2 - 1.96*AFT.se.2,
AFT.point.2 + 1.96*AFT.se.2))
#get point estimate and CI comparing 80 to 60 mg/day for someone without a history of incarceration and from the same clinic
AFT.point.3 <- (80-60) * coef(weibull.adix.2)["dose"]
AFT.se.3 <- deltamethod(g = ~(80-60) * x1,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.3)
#confidence interval
exp(c(AFT.point.3 - 1.96*AFT.se.3,
AFT.point.3 + 1.96*AFT.se.3))
#fit new weibull AFT model
weibull.adix.2 <- flexsurvreg(surv.adix ~ dose + clinic + prison + dose*prison, data=adix, dist="weibull")
weibull.adix.3 <- flexsurvreg(surv.adix ~ dose*prison + clinic, data=adix, dist="weibull")
#get point estimate and CI comparing 80 to 60 mg/day for someone with a history of incarceration and from the same clinic
AFT.point.2 <- (80-60) * coef(weibull.adix.2)["dose"] +
(80-60) * coef(weibull.adix.2)["dose:prison"]
AFT.se.2 <- deltamethod(g = ~(80-60) * x1 + (80-60) * x4,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.2)
#confidence interval
exp(c(AFT.point.2 - 1.96*AFT.se.2,
AFT.point.2 + 1.96*AFT.se.2))
#get point estimate and CI comparing 80 to 60 mg/day for someone without a history of incarceration and from the same clinic
AFT.point.3 <- (80-60) * coef(weibull.adix.2)["dose"]
AFT.se.3 <- deltamethod(g = ~(80-60) * x1,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.3)
#confidence interval
exp(c(AFT.point.3 - 1.96*AFT.se.3,
AFT.point.3 + 1.96*AFT.se.3))
#using wald test
SE.int.term <- deltamethod((g = ~exp((80-60) * x1),
#using wald test
SE.int.term <- deltamethod(g = ~exp((80-60) * x1),
mean=coef(weibull.adix.2)["dose:prison"],
cov=vcov(weibull.adix.2)["dose:prison", "dose:prison"],
ses=TRUE)
wald.test.stat <- (exp((80-60) * coef(weibull.adix.2)["dose:prison"])-1) / SE.int.term
wald.test.stat
#using wald test
SE.int.term <- deltamethod(g = ~exp((80-60) * x1),
mean=coef(weibull.adix.2)["dose:prison"],
cov=vcov(weibull.adix.2)["dose:prison", "dose:prison"],
ses=TRUE)
wald.test.stat <- (exp((80-60) * coef(weibull.adix.2)["dose:prison"])-1) / SE.int.term
wald.test.stat
#wald p-value
2 * pnorm(-abs(wald.test.stat))
knitr::opts_chunk$set(echo = FALSE)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%204/diabetesST11.dta"
diab <- read_dta(url(link))
library(haven)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%204/diabetesST11.dta"
diab <- read_dta(url(link))
summary(diab)
library(haven)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%204/diabetesST11.dta"
diab <- read_dta(url(link))
#create study time in years variable
diab$time_year <- diab$time/12
library(haven)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%204/diabetesST11.dta"
diab <- read_dta(url(link))
#create study time in years variable
diab$time_year <- diab$time/12
#create age at blindness
diab$age_blind <- diab$age + diab$time_year
#subset data to include only untreated eyes
diab.untreat <- (diab$treat == 0)
summary(diab.untreat)
library(haven)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%204/diabetesST11.dta"
diab <- read_dta(url(link))
#create study time in years variable
diab$time_year <- diab$time/12
#create age at blindness
diab$age_blind <- diab$age + diab$time_year
#subset data to include only untreated eyes
diab.untreat <- diab[(diab$treat == 0)]
library(haven)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%204/diabetesST11.dta"
diab <- read_dta(url(link))
#create study time in years variable
diab$time_year <- diab$time/12
#create age at blindness
diab$age_blind <- diab$age + diab$time_year
#subset data to include only untreated eyes
diab.untreat <- diab[which(diab$treat == 0),]
summary(diab.untreat)
surv.diab <- with(diab.untreat, Surv(age, age_blind, status))
knitr::opts_chunk$set(echo = FALSE)
if (!require(kableExtra)) install.packages("kableExtra")
if (!require(flexsurv)) install.packages("flexsurv")
if (!require(survMisc)) install.packages("survMisc")
if (!require(msm)) install.packages("msm")
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(tableone)) install.packages("tableone")
if (!require(compareGroups)) install.packages("compareGroups")
if (!require(table1)) install.packages("table1")
library(tidyverse)
library(knitr)
library(kableExtra)
#source("getmedianres.R")
library(survival)
library(flexsurv)
library(survMisc) # for Wilcoxon-Gehan-Breslow test
library(msm)
library(tableone)
library(compareGroups)
library(table1)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%201/addicts.csv"
adix <- read.csv(link)
surv.adix <- Surv(time=adix$time, event=adix$event, type="right")
survfit.adix <- survfit(surv.adix ~ 1, data=adix, conf.type = "log-log")
weibull.adix.1 <- flexsurvreg(surv.adix ~ dose + clinic + prison, data=adix, dist="weibull")
#weibull.adix.1
weibull.adix.est <- round(exp(weibull.adix.1$res[3:5, 1:3]), 3)
weibull.adix.est %>%
kable(col.names = c("Estimate", "95% CI Lower", "95% CI Upper")) %>%
kable_styling(full_width = F,
position="left")
cox.1 <- coxph(surv.adix ~ dose + clinic + prison, data=adix)
cox.1
gengamma.adix.1 <- flexsurvreg(surv.adix ~ dose + clinic + prison, data=adix, dist="gengamma")
#gengamma.adix.1
gengamma.adix.est <- round(exp(gengamma.adix.1$res[4:6, 1:3]), 3)
#gengamma.adix.est
perc_diff <- (gengamma.adix.est[,1]-weibull.adix.est[,1])/weibull.adix.est[,1]
perc_diff
AFT.point <- (40-100) * coef(weibull.adix.1)["dose"] +
(2-1) * coef(weibull.adix.1)["clinic"] +
(0-1) * coef(weibull.adix.1)["prison"]
AFT.se <- deltamethod(g = ~(40-100) * x1 + (2-1) * x2 + (0-1) * x3,
mean = coef(weibull.adix.1)[c("dose", "clinic", "prison")],
cov=vcov(weibull.adix.1)[c("dose", "clinic", "prison"),
c("dose", "clinic", "prison")],
ses=TRUE)
#point estimate
exp(AFT.point)
#confindene interval
exp(c(AFT.point - 1.96*AFT.se,
AFT.point + 1.96*AFT.se))
#median for person from clinic 2 on 40 mg/day with no history of incarceration
AFT.median.1 <- exp(40 * coef(weibull.adix.1)["dose"] +
2 * coef(weibull.adix.1)["clinic"]) *
log(2) ^ (1/exp(coef(weibull.adix.1)["shape"])) *
exp(coef(weibull.adix.1)["scale"])
AFT.median.1.se <- deltamethod(g = ~exp(40*x1 + 2*x2)
* log(2) ^ (1/exp(x4)) * exp(x5),
mean = coef(weibull.adix.1)[c("dose", "clinic", "prison", "shape", "scale")],
cov=vcov(weibull.adix.1)[c("dose", "clinic", "prison", "shape", "scale"),
c("dose", "clinic", "prison", "shape", "scale")],
ses=TRUE)
#point estimate
AFT.median.1
#confidence interval
c(AFT.median.1 - 1.96*AFT.median.1.se,
AFT.median.1 + 1.96*AFT.median.1.se)
#median for person from clinic 1 on 100 mg/day with a history of incarceration
AFT.median.2 <- exp(100 * coef(weibull.adix.1)["dose"] +
1 * coef(weibull.adix.1)["clinic"] +
1 * coef(weibull.adix.1)["prison"]) *
log(2) ^ (1/exp(coef(weibull.adix.1)["shape"])) *
exp(coef(weibull.adix.1)["scale"])
AFT.median.2.se <- deltamethod(g = ~exp(100*x1 + 1*x2 + 1*x3)
* log(2) ^ (1/exp(x4)) * exp(x5),
mean = coef(weibull.adix.1)[c("dose", "clinic", "prison", "shape", "scale")],
cov=vcov(weibull.adix.1)[c("dose", "clinic", "prison", "shape", "scale"),
c("dose", "clinic", "prison", "shape", "scale")],
ses=TRUE)
#point estimate
AFT.median.2
#confidence interval
c(AFT.median.2 - 1.96*AFT.median.2.se,
AFT.median.2 + 1.96*AFT.median.2.se)
#fit new weibull AFT model
weibull.adix.2 <- flexsurvreg(surv.adix ~ dose + clinic + prison + dose*prison, data=adix, dist="weibull")
#weibull.adix.3 <- flexsurvreg(surv.adix ~ dose*prison + clinic, data=adix, dist="weibull")
#get point estimate and CI comparing 80 to 60 mg/day for someone with a history of incarceration and from the same clinic
AFT.point.2 <- (80-60) * coef(weibull.adix.2)["dose"] +
(80-60) * coef(weibull.adix.2)["dose:prison"]
AFT.se.2 <- deltamethod(g = ~(80-60) * x1 + (80-60) * x4,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.2)
#confidence interval
exp(c(AFT.point.2 - 1.96*AFT.se.2,
AFT.point.2 + 1.96*AFT.se.2))
#get point estimate and CI comparing 80 to 60 mg/day for someone without a history of incarceration and from the same clinic
AFT.point.3 <- (80-60) * coef(weibull.adix.2)["dose"]
AFT.se.3 <- deltamethod(g = ~(80-60) * x1,
mean = coef(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison")],
cov=vcov(weibull.adix.2)[c("dose", "clinic", "prison", "dose:prison"),
c("dose", "clinic", "prison", "dose:prison")],
ses=TRUE)
#point estimate
exp(AFT.point.3)
#confidence interval
exp(c(AFT.point.3 - 1.96*AFT.se.3,
AFT.point.3 + 1.96*AFT.se.3))
#using wald test
SE.int.term <- deltamethod(g = ~exp((80-60) * x1),
mean=coef(weibull.adix.2)["dose:prison"],
cov=vcov(weibull.adix.2)["dose:prison", "dose:prison"],
ses=TRUE)
wald.test.stat <- (exp((80-60) * coef(weibull.adix.2)["dose:prison"])-1) / SE.int.term
wald.test.stat
#wald p-value
2 * pnorm(-abs(wald.test.stat))
library(haven)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%204/diabetesST11.dta"
diab <- read_dta(url(link))
#create study time in years variable
diab$time_year <- diab$time/12
#create age at blindness
diab$age_blind <- diab$age + diab$time_year
#subset data to include only untreated eyes
diab.untreat <- diab[which(diab$treat == 0),]
surv.diab <- with(diab.untreat, Surv(age, age_blind, status))
survfit.diab <- survfit(surv.diab ~ 1, data=daib.untreat, conf.type = "log-log")
surv.diab <- with(diab.untreat, Surv(age, age_blind, status))
survfit.diab <- survfit(surv.diab ~ 1, data=diab.untreat, conf.type = "log-log")
knitr::opts_chunk$set(echo=FALSE, warning=FALSE)
library(pander)
panderOptions('digits', 4)
panderOptions('round', 4)
library(tidyverse)
library(knitr)
library(kableExtra)
source("getmedianres.R")
#Maintenance Group
maint_table_time <- c(9,12,13,18,23,28,31,34,45,48,161)
maint_table_n <- c(12,11,10,9,8,7,6,5,4,2,1)
maint_table_d <- c(1,1,0,1,1,0,1,1,1,1,0)
maint_table <- cbind.data.frame(maint_table_time, maint_table_n, maint_table_d)
maint_table$d_n <- maint_table$maint_table_d / maint_table$maint_table_n
maint_table$d_n_1 <- 1-maint_table$d_n
#Generating survival est
for (val in maint_table$maint_table_time) {
maint_table <- mutate(maint_table, S_t = ifelse(maint_table_time>9, lag(maint_table$S_t)*d_n_1, 0.9166667))
}
#Generating cumulative haz est
for (val in maint_table$maint_table_time) {
maint_table <- mutate(maint_table, H_t = ifelse(maint_table_time>9, lag(maint_table$H_t)+d_n, 0.08333333))
}
kable(maint_table, digits=3, align="c",
col.names = c("Time (t)",
"# at risk (n)",
"# events (d)",
"d/n",
"1-d/n",
"S(t)",
"H(t)")) %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F, position="left") %>%
column_spec(1, bold=T, border_right=T)
#Control Group
cont_table_time <- c(4,5,8,10,12,16,23,27,30,38,43,45)
cont_table_n <- c(13,12,11,9,8,7,6,5,4,3,2,1)
cont_table_d <- c(1,1,2,0,1,0,1,1,1,1,1,1)
cont_table <- cbind.data.frame(cont_table_time, cont_table_n, cont_table_d)
cont_table$d_n <- cont_table$cont_table_d / cont_table$cont_table_n
cont_table$d_n_1 <- 1-cont_table$d_n
#Generating survival est
for (val in cont_table$cont_table_time) {
cont_table <- mutate(cont_table, S_t = ifelse(cont_table_time>4, lag(cont_table$S_t)*d_n_1, d_n_1))
}
#Generating cumulative haz est
for (val in cont_table$cont_table_time) {
cont_table <- mutate(cont_table, H_t = ifelse(cont_table_time>4, lag(cont_table$H_t)+d_n, d_n))
}
kable(cont_table, digits=3, align="c",
col.names = c("Time (t)",
"# at risk (n)",
"# events (d)",
"d/n",
"1-d/n",
"S(t)",
"H(t)")) %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F, position="left") %>%
column_spec(1, bold=T, border_right=T)
link = "https://github.com/dmccoomes/Survival/raw/master/Homework%202/addicts.csv"
adix <- read.csv(link)
link = "https://github.com/dmccoomes/Survival/raw/master/Quiz%20section/fitparametric.R"
source(link)
surv.adix <- Surv(time=adix$time, event=adix$event, type="right")
survfit.adix <- survfit(surv.adix ~ 1, data=adix, conf.type="log-log")
summary(survfit.adix)
plot(survfit.adix,
conf.int=TRUE,
main="Kaplan-Meier survival estimate (includes 95% CI)",
ylab="Survival probability", xlab="Time (in days)",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
plot(survfit.diab,
conf.int=TRUE,
main="Kaplan-Meier survival estimate (includes 95% CI)",
ylab="Survival probability", xlab="Age",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
summary(survfit.diab)$table
#creating survival function that includes left truncation
surv.diab.lt <- with(diab.untreat, Surv(age, age_blind, status))
survfit.diab.lt <- survfit(surv.diab.lt ~ 1, data=diab.untreat, conf.type = "log-log")
#creating survival function that does NOT include left truncation
surv.diab <- with(diab.untreat, Surv(age_blind, status))
survfit.diab <- survfit(surv.diab ~ 1, data=diab.untreat, conf.type = "log-log")
summary(survfit.diab.lt)$table
summary(survfit.diab.lt)$table
summary(survfit.diab.lt)$table
plot(survfit.diab.lt,
conf.int=TRUE,
main="Kaplan-Meier survival estimate (includes 95% CI)",
ylab="Survival probability", xlab="Age",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
summary(survfit.diab)$table
summary(survfit.diab)$table
plot(survfit.diab,
conf.int=TRUE,
main="Kaplan-Meier survival estimate (includes 95% CI)",
ylab="Survival probability", xlab="Age",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
summary(survfit.diab)$table
plot(survfit.diab.lt,
conf.int=TRUE,
main="Kaplan-Meier survival estimate accounting for left truncation \n(includes 95% CI)",
ylab="Survival probability", xlab="Age",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
plot(survfit.diab,
conf.int=TRUE,
main="Kaplan-Meier survival estimate not accounting for left truncation \n(includes 95% CI)",
ylab="Survival probability", xlab="Age",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
plot(survfit.diab.3,
conf.int=TRUE,
main="Kaplan-Meier survival estimate not accounting for left truncation \n(includes 95% CI)",
ylab="Survival probability", xlab="Age",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
#creating survival function that includes left truncation
surv.diab.lt <- with(diab.untreat, Surv(age, age_blind, status))
survfit.diab.lt <- survfit(surv.diab.lt ~ 1, data=diab.untreat, conf.type = "log-log")
#creating survival function that does NOT include left truncation
surv.diab <- with(diab.untreat, Surv(age_blind, status))
survfit.diab <- survfit(surv.diab ~ 1, data=diab.untreat, conf.type = "log-log")
#fitting a curve that is time since diagnosis
surv.diab.3 <- with(diab.untreat, Surv(time, status))
survfit.diab3 <- survfit(surv.diab.3 ~ 1, data=diab.untreat, conf.type = "log-log")
plot(survfit.diab.3,
conf.int=TRUE,
main="Kaplan-Meier survival estimate not accounting for left truncation \n(includes 95% CI)",
ylab="Survival probability", xlab="Age",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
#creating survival function that includes left truncation
surv.diab.lt <- with(diab.untreat, Surv(age, age_blind, status))
survfit.diab.lt <- survfit(surv.diab.lt ~ 1, data=diab.untreat, conf.type = "log-log")
#creating survival function that does NOT include left truncation
surv.diab <- with(diab.untreat, Surv(age_blind, status))
survfit.diab <- survfit(surv.diab ~ 1, data=diab.untreat, conf.type = "log-log")
#fitting a curve that is time since diagnosis
surv.diab.3 <- with(diab.untreat, Surv(time, status))
survfit.diab.3 <- survfit(surv.diab.3 ~ 1, data=diab.untreat, conf.type = "log-log")
plot(survfit.diab.3,
conf.int=TRUE,
main="Kaplan-Meier survival estimate not accounting for left truncation \n(includes 95% CI)",
ylab="Survival probability", xlab="Age",
col=c("blue", "light blue", "light blue"),
lty=c("solid", "dashed", "dashed"),
lwd=c(2, 1, 1),
caption ="caption")
